
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000360  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000360  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000b28  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005fb  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025a  00000000  00000000  000011e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000521  00000000  00000000  0000143d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001960  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c7  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000289  00000000  00000000  00001be3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
  8a:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vSetPinDir>:
#include <avr/io.h>
#include "DIO.h"

void DIO_vSetPinDir(uint8 portName, uint8 pinNumber, DIRECTION dir)
{
	switch(portName)
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	51 f1       	breq	.+84     	; 0xea <DIO_vSetPinDir+0x58>
  96:	83 34       	cpi	r24, 0x43	; 67
  98:	20 f4       	brcc	.+8      	; 0xa2 <DIO_vSetPinDir+0x10>
  9a:	81 34       	cpi	r24, 0x41	; 65
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_vSetPinDir+0xe>
  9e:	7b c0       	rjmp	.+246    	; 0x196 <DIO_vSetPinDir+0x104>
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <DIO_vSetPinDir+0x1e>
  a2:	83 34       	cpi	r24, 0x43	; 67
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vSetPinDir+0x16>
  a6:	3e c0       	rjmp	.+124    	; 0x124 <DIO_vSetPinDir+0x92>
  a8:	84 34       	cpi	r24, 0x44	; 68
  aa:	09 f0       	breq	.+2      	; 0xae <DIO_vSetPinDir+0x1c>
  ac:	74 c0       	rjmp	.+232    	; 0x196 <DIO_vSetPinDir+0x104>
  ae:	57 c0       	rjmp	.+174    	; 0x15e <DIO_vSetPinDir+0xcc>
	{
		case 'A':
		if(eOutPut == dir)
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	69 f4       	brne	.+26     	; 0xce <DIO_vSetPinDir+0x3c>
		{
			DDRA |= (1<<pinNumber);
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_vSetPinDir+0x30>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_vSetPinDir+0x2c>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	6a bb       	out	0x1a, r22	; 26
  cc:	08 95       	ret
		}
		else
		{
			DDRA &= ~(1<<pinNumber);
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac 01       	movw	r20, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vSetPinDir+0x4a>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vSetPinDir+0x46>
  e0:	ba 01       	movw	r22, r20
  e2:	60 95       	com	r22
  e4:	62 23       	and	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		break;
		
		case 'B':
		if(eOutPut == dir)
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	69 f4       	brne	.+26     	; 0x108 <DIO_vSetPinDir+0x76>
		{
			DDRB |= (1<<pinNumber);
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vSetPinDir+0x6a>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vSetPinDir+0x66>
 100:	ba 01       	movw	r22, r20
 102:	62 2b       	or	r22, r18
 104:	67 bb       	out	0x17, r22	; 23
 106:	08 95       	ret
		}
		else
		{
			DDRB &= ~(1<<pinNumber);
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vSetPinDir+0x84>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vSetPinDir+0x80>
 11a:	ba 01       	movw	r22, r20
 11c:	60 95       	com	r22
 11e:	62 23       	and	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		break;
		
		case 'C':
		if(eOutPut == dir)
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	69 f4       	brne	.+26     	; 0x142 <DIO_vSetPinDir+0xb0>
		{
			DDRC |= (1<<pinNumber);
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vSetPinDir+0xa4>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vSetPinDir+0xa0>
 13a:	ba 01       	movw	r22, r20
 13c:	62 2b       	or	r22, r18
 13e:	64 bb       	out	0x14, r22	; 20
 140:	08 95       	ret
		}
		else
		{
			DDRC &= ~(1<<pinNumber);
 142:	24 b3       	in	r18, 0x14	; 20
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vSetPinDir+0xbe>
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vSetPinDir+0xba>
 154:	ba 01       	movw	r22, r20
 156:	60 95       	com	r22
 158:	62 23       	and	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		break;
		
		case 'D':
		if(eOutPut == dir)
 15e:	41 30       	cpi	r20, 0x01	; 1
 160:	69 f4       	brne	.+26     	; 0x17c <DIO_vSetPinDir+0xea>
		{
			DDRD |= (1<<pinNumber);
 162:	21 b3       	in	r18, 0x11	; 17
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ac 01       	movw	r20, r24
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_vSetPinDir+0xde>
 16c:	44 0f       	add	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_vSetPinDir+0xda>
 174:	ba 01       	movw	r22, r20
 176:	62 2b       	or	r22, r18
 178:	61 bb       	out	0x11, r22	; 17
 17a:	08 95       	ret
		}
		else
		{
			DDRD &= ~(1<<pinNumber);
 17c:	21 b3       	in	r18, 0x11	; 17
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vSetPinDir+0xf8>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vSetPinDir+0xf4>
 18e:	ba 01       	movw	r22, r20
 190:	60 95       	com	r22
 192:	62 23       	and	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret

00000198 <DIO_vWritePinDir>:
		break;
	}
}
void DIO_vWritePinDir(uint8 portName, uint8 pinNumber, DIRECTION dir)
{
	switch(portName)
 198:	82 34       	cpi	r24, 0x42	; 66
 19a:	51 f1       	breq	.+84     	; 0x1f0 <DIO_vWritePinDir+0x58>
 19c:	83 34       	cpi	r24, 0x43	; 67
 19e:	20 f4       	brcc	.+8      	; 0x1a8 <DIO_vWritePinDir+0x10>
 1a0:	81 34       	cpi	r24, 0x41	; 65
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <DIO_vWritePinDir+0xe>
 1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_vWritePinDir+0x104>
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <DIO_vWritePinDir+0x1e>
 1a8:	83 34       	cpi	r24, 0x43	; 67
 1aa:	09 f4       	brne	.+2      	; 0x1ae <DIO_vWritePinDir+0x16>
 1ac:	3e c0       	rjmp	.+124    	; 0x22a <DIO_vWritePinDir+0x92>
 1ae:	84 34       	cpi	r24, 0x44	; 68
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_vWritePinDir+0x1c>
 1b2:	74 c0       	rjmp	.+232    	; 0x29c <DIO_vWritePinDir+0x104>
 1b4:	57 c0       	rjmp	.+174    	; 0x264 <DIO_vWritePinDir+0xcc>
	{
		case 'A':
		if(eOutPut == dir)
 1b6:	41 30       	cpi	r20, 0x01	; 1
 1b8:	69 f4       	brne	.+26     	; 0x1d4 <DIO_vWritePinDir+0x3c>
		{
			PORTA |= (1<<pinNumber);
 1ba:	2b b3       	in	r18, 0x1b	; 27
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	ac 01       	movw	r20, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_vWritePinDir+0x30>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_vWritePinDir+0x2c>
 1cc:	ba 01       	movw	r22, r20
 1ce:	62 2b       	or	r22, r18
 1d0:	6b bb       	out	0x1b, r22	; 27
 1d2:	08 95       	ret
		}
		else
		{
			PORTA &= ~(1<<pinNumber);
 1d4:	2b b3       	in	r18, 0x1b	; 27
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_vWritePinDir+0x4a>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_vWritePinDir+0x46>
 1e6:	ba 01       	movw	r22, r20
 1e8:	60 95       	com	r22
 1ea:	62 23       	and	r22, r18
 1ec:	6b bb       	out	0x1b, r22	; 27
 1ee:	08 95       	ret
		}
		break;
		
		case 'B':
		if(eOutPut == dir)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	69 f4       	brne	.+26     	; 0x20e <DIO_vWritePinDir+0x76>
		{
			PORTB |= (1<<pinNumber);
 1f4:	28 b3       	in	r18, 0x18	; 24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	ac 01       	movw	r20, r24
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_vWritePinDir+0x6a>
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_vWritePinDir+0x66>
 206:	ba 01       	movw	r22, r20
 208:	62 2b       	or	r22, r18
 20a:	68 bb       	out	0x18, r22	; 24
 20c:	08 95       	ret
		}
		else
		{
			PORTB &= ~(1<<pinNumber);
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ac 01       	movw	r20, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_vWritePinDir+0x84>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_vWritePinDir+0x80>
 220:	ba 01       	movw	r22, r20
 222:	60 95       	com	r22
 224:	62 23       	and	r22, r18
 226:	68 bb       	out	0x18, r22	; 24
 228:	08 95       	ret
		}
		break;
		
		case 'C':
		if(eOutPut == dir)
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	69 f4       	brne	.+26     	; 0x248 <DIO_vWritePinDir+0xb0>
		{
			PORTC |= (1<<pinNumber);
 22e:	25 b3       	in	r18, 0x15	; 21
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_vWritePinDir+0xa4>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_vWritePinDir+0xa0>
 240:	ba 01       	movw	r22, r20
 242:	62 2b       	or	r22, r18
 244:	65 bb       	out	0x15, r22	; 21
 246:	08 95       	ret
		}
		else
		{
			PORTC &= ~(1<<pinNumber);
 248:	25 b3       	in	r18, 0x15	; 21
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	ac 01       	movw	r20, r24
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_vWritePinDir+0xbe>
 252:	44 0f       	add	r20, r20
 254:	55 1f       	adc	r21, r21
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_vWritePinDir+0xba>
 25a:	ba 01       	movw	r22, r20
 25c:	60 95       	com	r22
 25e:	62 23       	and	r22, r18
 260:	65 bb       	out	0x15, r22	; 21
 262:	08 95       	ret
		}
		break;
		
		case 'D':
		if(eOutPut == dir)
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	69 f4       	brne	.+26     	; 0x282 <DIO_vWritePinDir+0xea>
		{
			PORTD |= (1<<pinNumber);
 268:	22 b3       	in	r18, 0x12	; 18
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	ac 01       	movw	r20, r24
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_vWritePinDir+0xde>
 272:	44 0f       	add	r20, r20
 274:	55 1f       	adc	r21, r21
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_vWritePinDir+0xda>
 27a:	ba 01       	movw	r22, r20
 27c:	62 2b       	or	r22, r18
 27e:	62 bb       	out	0x12, r22	; 18
 280:	08 95       	ret
		}
		else
		{
			PORTD &= ~(1<<pinNumber);
 282:	22 b3       	in	r18, 0x12	; 18
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	ac 01       	movw	r20, r24
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_vWritePinDir+0xf8>
 28c:	44 0f       	add	r20, r20
 28e:	55 1f       	adc	r21, r21
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_vWritePinDir+0xf4>
 294:	ba 01       	movw	r22, r20
 296:	60 95       	com	r22
 298:	62 23       	and	r22, r18
 29a:	62 bb       	out	0x12, r22	; 18
 29c:	08 95       	ret

0000029e <main>:
int main(void)
{
	
	uint8 recived_data = 0;
	uint8 trans_data = 1;
	DIO_vSetPinDir('D' , 3 , eOutPut);
 29e:	84 e4       	ldi	r24, 0x44	; 68
 2a0:	63 e0       	ldi	r22, 0x03	; 3
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	CLR_BIT(PORTD , 3);
 2a8:	93 98       	cbi	0x12, 3	; 18
	DIO_vSetPinDir('C' , 2 , eOutPut);
 2aa:	83 e4       	ldi	r24, 0x43	; 67
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	CLR_BIT(PORTC , 2);
 2b4:	aa 98       	cbi	0x15, 2	; 21
	SPI_Slave_Init();
 2b6:	0e 94 8e 01 	call	0x31c	; 0x31c <SPI_Slave_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	8f e3       	ldi	r24, 0x3F	; 63
 2bc:	9d e0       	ldi	r25, 0x0D	; 13
 2be:	a3 e0       	ldi	r26, 0x03	; 3
 2c0:	81 50       	subi	r24, 0x01	; 1
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	a0 40       	sbci	r26, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x22>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x2c>
 2ca:	00 00       	nop
    while(1)
    {
		recived_data = SPI_Transiver(trans_data); /*the received data transmitted from the Master and send it's data to the Master*/
		if( recived_data == '1')
		{
			TOG_BIT(PORTC , 2);
 2cc:	c4 e0       	ldi	r28, 0x04	; 4
		}
		else if(recived_data == '2')
		{
			TOG_BIT(PORTD , 3);
 2ce:	d8 e0       	ldi	r29, 0x08	; 8
	CLR_BIT(PORTC , 2);
	SPI_Slave_Init();
	_delay_ms(1000);
    while(1)
    {
		recived_data = SPI_Transiver(trans_data); /*the received data transmitted from the Master and send it's data to the Master*/
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 a9 01 	call	0x352	; 0x352 <SPI_Transiver>
		if( recived_data == '1')
 2d6:	81 33       	cpi	r24, 0x31	; 49
 2d8:	21 f4       	brne	.+8      	; 0x2e2 <main+0x44>
		{
			TOG_BIT(PORTC , 2);
 2da:	85 b3       	in	r24, 0x15	; 21
 2dc:	8c 27       	eor	r24, r28
 2de:	85 bb       	out	0x15, r24	; 21
 2e0:	f7 cf       	rjmp	.-18     	; 0x2d0 <main+0x32>
		}
		else if(recived_data == '2')
 2e2:	82 33       	cpi	r24, 0x32	; 50
 2e4:	a9 f7       	brne	.-22     	; 0x2d0 <main+0x32>
		{
			TOG_BIT(PORTD , 3);
 2e6:	82 b3       	in	r24, 0x12	; 18
 2e8:	8d 27       	eor	r24, r29
 2ea:	82 bb       	out	0x12, r24	; 18
 2ec:	f1 cf       	rjmp	.-30     	; 0x2d0 <main+0x32>

000002ee <SPI_Master_Init>:
#include <avr/io.h>
#include "SPI.h"

void SPI_Master_Init(void)
{
	DIO_vSetPinDir('B', 4, eOutPut);
 2ee:	82 e4       	ldi	r24, 0x42	; 66
 2f0:	64 e0       	ldi	r22, 0x04	; 4
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir('B', 5, eOutPut);
 2f8:	82 e4       	ldi	r24, 0x42	; 66
 2fa:	65 e0       	ldi	r22, 0x05	; 5
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir('B', 6, eInPut);
 302:	82 e4       	ldi	r24, 0x42	; 66
 304:	66 e0       	ldi	r22, 0x06	; 6
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir('B', 7, eOutPut);
 30c:	82 e4       	ldi	r24, 0x42	; 66
 30e:	67 e0       	ldi	r22, 0x07	; 7
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	
	SPCR = 0x53;
 316:	83 e5       	ldi	r24, 0x53	; 83
 318:	8d b9       	out	0x0d, r24	; 13
}
 31a:	08 95       	ret

0000031c <SPI_Slave_Init>:

void SPI_Slave_Init(void)
{
	DIO_vSetPinDir('B', 4, eInPut);
 31c:	82 e4       	ldi	r24, 0x42	; 66
 31e:	64 e0       	ldi	r22, 0x04	; 4
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir('B', 5, eInPut);
 326:	82 e4       	ldi	r24, 0x42	; 66
 328:	65 e0       	ldi	r22, 0x05	; 5
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir('B', 6, eOutPut);
 330:	82 e4       	ldi	r24, 0x42	; 66
 332:	66 e0       	ldi	r22, 0x06	; 6
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	DIO_vSetPinDir('B', 7, eInPut);
 33a:	82 e4       	ldi	r24, 0x42	; 66
 33c:	67 e0       	ldi	r22, 0x07	; 7
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPinDir>
	
	SPCR = 0x40;
 344:	80 e4       	ldi	r24, 0x40	; 64
 346:	8d b9       	out	0x0d, r24	; 13
}
 348:	08 95       	ret

0000034a <SPI_Master_Init_Trans>:

void SPI_Master_Init_Trans(void)
{
	CLR_BIT(PORTB,4);
 34a:	c4 98       	cbi	0x18, 4	; 24
}
 34c:	08 95       	ret

0000034e <SPI_Master_Ter_Trans>:

void SPI_Master_Ter_Trans(void)
{
	SET_BIT(PORTB,4);
 34e:	c4 9a       	sbi	0x18, 4	; 24
}
 350:	08 95       	ret

00000352 <SPI_Transiver>:

uint8 SPI_Transiver(uint8 data)
{
	SPDR = data;
 352:	8f b9       	out	0x0f, r24	; 15
	while(READ_BIT(SPSR, 7) == 0 );
 354:	77 9b       	sbis	0x0e, 7	; 14
 356:	fe cf       	rjmp	.-4      	; 0x354 <SPI_Transiver+0x2>
	return SPDR;
 358:	8f b1       	in	r24, 0x0f	; 15
}
 35a:	08 95       	ret

0000035c <_exit>:
 35c:	f8 94       	cli

0000035e <__stop_program>:
 35e:	ff cf       	rjmp	.-2      	; 0x35e <__stop_program>
